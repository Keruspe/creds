#!/usr/bin/env bash
# Copyright (c) 2016, Marc-Antoine Perennou <Marc-Antoine@Perennou.com>

set -euo pipefail

readonly CREDS_VERSION="0"

readonly CREDS_BIN="${0##*/}"
readonly CREDS_DIR="${XDG_DATA_HOME:-"${HOME}/.local/share"}/creds"
readonly CREDS_CONFIG_DIR="${XDG_CONFIG_HOME:-"${HOME}/.config"}/creds"
readonly CREDS_GPG_ID="${CREDS_CONFIG_DIR}/gpg-id"
readonly CREDS_TOP_LABEL="Credentials"
readonly CREDS_ADD_RAW="Add raw"

readonly CREDS_GPG_ARGS=( --batch -q --yes --no-encrypt-to --compress-algo=bzip2 )

creds_die() {
    local ret="${1}"

    shift

    echo "${*}" >&2
    exit "${ret}"
}

creds_abort() {
    creds_die 0 "Aborting"
}

creds_version() {
    echo "${CREDS_BIN} version ${CREDS_VERSION}"
}

creds_help() {
    creds_version
    cat <<EOF
Usage:
    ${CREDS_BIN} [show] <name>          -- Display a tree of credentials saved under <name>/ or get the credential named <name>
    ${CREDS_BIN} tree <name>            -- Display a tree of credentials saved under <name>/
    ${CREDS_BIN} find <pattern>         -- Display a tree of credentials which names contain <pattern>
    ${CREDS_BIN} grep <pattern>         -- Display a list of credentials which contents match <pattern>
    [... |] ${CREDS_BIN} add <name>     -- Add new credentials named <name> (can read from stdin, will do add-raw in that case)
    [... |] ${CREDS_BIN} add-raw <name> -- Add new raw data under the name <name> (can read data from stdin)
    ${CREDS_BIN} generate <name> <size> -- Generate new credentials named <name> and get them
    ${CREDS_BIN} edit <name>            -- Edit existing credentials named <name>
    ${CREDS_BIN} rm <name>              -- Delete existing credentials named <name>
    ${CREDS_BIN} cp <name> <new>        -- Copy existing credentials named <name> as <new>
    ${CREDS_BIN} mv <name> <new>        -- Rename existing credentials named <name> as <new>
    ${CREDS_BIN} get <name>             -- Get the credentials named <name>
    ${CREDS_BIN} git ...                -- Run some git commands in the credentials data directory
    ${CREDS_BIN} gpg-id [id]            -- Display the configure gpg-id to use or set it
    ${CREDS_BIN} version                -- Display the version number
    ${CREDS_BIN} help                   -- Display this message
EOF
}

creds_die_help() {
    local ret="${1}"

    creds_die "${ret}" "$(creds_help)"
}

creds_ensure_dirs() {
    mkdir -p "${CREDS_DIR}"
    mkdir -p "${CREDS_CONFIG_DIR}"
}

creds_check_file_not_empty() {
    local file="${1}"

    [[ -f "${file}" && -s "${file}" ]]
}

creds_file() {
    local name="${1}"

    echo "${CREDS_DIR}/${name}.creds"
}

creds_check_exists() {
    local name="${1}"

    creds_check_file_not_empty "$(creds_file "${name}")"
}

creds_ensure_file_not_empty() {
    local file="${1}"

    creds_check_file_not_empty "${file}" || creds_die_help 1
}

creds_ensure_exists() {
    local name="${1}"

    creds_check_exists "${name}" || creds_die 1 "${name} doesn't exist"
}

creds_ensure_gpg_id() {
    if ! creds_check_file_not_empty "${CREDS_GPG_ID}"; then
        creds_die 1 "No gpg-id configured, please set one using '${CREDS_BIN} gpg-id XXXXXXXX' where XXXXXXXX is your gpg id."
    fi
}

creds_ensure_enough_args() {
    local nb="${1}"

    shift

    if [[ "${#}" -lt "${nb}" ]]; then
        creds_die_help 1
    fi
}

creds_get_gpg_id() {
    creds_ensure_gpg_id
    cat -v "${CREDS_GPG_ID}"
}

creds_has_bin() {
    local bin="${1}"

    which "${bin}" &>/dev/null
}

creds_get_gpg_bin() {
    local bins=(
        gpg2
        gpg
    )
    local bin

    for bin in "${bins[@]}"; do
        if creds_has_bin "${bin}"; then
            echo "${bin}"
            return
        fi
    done

    creds_die 1 "Neither of ${bins[*]} found on your system, aborting"
}

creds_run_gpg() {
    "$(creds_get_gpg_bin)" "${CREDS_GPG_ARGS[@]}" "${@}"
}

creds_has_git() {
    [[ -d "${CREDS_DIR}/.git" ]]
}

creds_git() {
    creds_ensure_enough_args 1 "${@}"

    local cmd="${1}"

    pushd "${CREDS_DIR}" &>/dev/null

    case "${cmd}" in
        init)
            git "${@}"
            git config --local diff.creds.textconv "$(creds_get_gpg_bin) ${CREDS_GPG_ARGS[*]} -d"
            cat > ".gitattributes" <<EOF
*.creds diff=creds
EOF
            git add .
            git commit -m "Initial commit"
            ;;
        *)
            creds_has_git || creds_die 1 "Please run '${CREDS_BIN} git init' first"
            git "${@}"
            ;;
    esac

    popd &>/dev/null
}

creds_is_piped() {
    [[ ! -t 0 ]];
}

creds_write_credentials() {
    local action="${1}"
    local size="${2}"
    local name="${3}"

    shift 3

    local file
    local gpg_id
    local username
    local password

    file="$(creds_file "${name}")"
    gpg_id="$(creds_get_gpg_id)"

    if [[ "${action}" == "${CREDS_ADD_RAW}" ]] || creds_is_piped; then
        # Add a special token as the username, and store the data as the password
        username="${CREDS_ADD_RAW}"
        if creds_is_piped; then
            password="$(cat)"
        else
            read -r -p "Data: " password
        fi
    else
        read -r -p "Username: " username
        if [[ "${size}" -gt "0" ]]; then
            password="$(pwgen -cny "${@}" "${size}")"
        else
            read -r -p "Password: " -s password
            echo
        fi
    fi

    mkdir -p "${file%/*}"
    creds_run_gpg -e -r "${gpg_id}" -o "${file}" <<EOF
${username}
${password}
EOF

    if creds_has_git; then
        creds_git add "${name}.creds"
        creds_git commit -m "${action} ${name}"
    fi
}

creds_ask() {
    local question="${1}"
    local ans=""

    while [[ ${ans,,} != "y" && ${ans,,} != "n" ]]; do
        read -r -p "${question} [y/n] " ans
    done

    [[ "${ans}" == "y" ]]
}

creds_do_rm() {
    local name="${1}"
    local commit="${2}"

    if creds_has_git; then
        creds_git rm "${name}.creds"
        [[ "${commit}" != "y" ]] || creds_git commit -m "Remove ${name}"
    else
        rm "$(creds_file "${name}")"
    fi
}

creds_check_override() {
    local name="${1}"

    if creds_check_exists "${name}"; then
        if creds_is_piped; then
            creds_die 1 "${name} already exists, aborting."
        else
            creds_ask "${name} already exists, do you want to override it?" || creds_abort
        fi
        creds_do_rm "${name}" "n"
    fi
}

creds_add_checks() {
    creds_ensure_enough_args 1 "${@}"

    local name="${1}"

    creds_check_override "${name}"
}

creds_add() {
    creds_add_checks "${@}"

    creds_write_credentials "Add" "0" "${@}"
}

creds_add_raw() {
    creds_add_checks "${@}"

    creds_write_credentials "Add raw" "0" "${@}"
}

creds_generate() {
    creds_ensure_enough_args 2 "${@}"

    local name="${1}"
    local size="${2}"

    shift 2

    creds_check_override "${name}"

    creds_write_credentials "Add" "${size}" "${name}" "${@}"
}

creds_simple_operation_checks() {
    creds_ensure_enough_args 1 "${@}"

    local name="${1}"

    creds_ensure_exists "${name}"
}

creds_edit() {
    creds_simple_operation_checks "${@}"

    creds_write_credentials "Edit" "0" "${@}"
}

creds_rm() {
    creds_simple_operation_checks "${@}"

    local name="${1}"

    creds_ask "Do you really want to delete ${name}?" || creds_abort

    creds_do_rm "${name}" "y"
}

creds_two_files_operation_checks() {
    creds_ensure_enough_args 2 "${@}"

    local name="${1}"
    local new="${2}"

    creds_ensure_exists "${name}"

    creds_check_override "${new}"
}

creds_cp() {
    creds_two_files_operation_checks "${@}"

    local name="${1}"
    local new="${2}"

    cp "$(creds_file "${name}")" "$(creds_file "${new}")"

    if creds_has_git; then
        creds_git add "${new}.creds"
        creds_git commit -m "Add ${new} (copy from ${name})"
    fi
}

creds_mv() {
    creds_two_files_operation_checks "${@}"

    local name="${1}"
    local new="${2}"

    if creds_has_git; then
        creds_git mv "${name}.creds" "${new}.creds"
        creds_git commit -m "Rename ${name} to ${new}"
    else
        mv "$(creds_file "${name}")" "$(creds_file "${new}")"
    fi
}

creds_give_credentials() {
    local name="${1}"
    local username="${2}"
    local password="${3}"

    if [[ "${username}" == "${CREDS_ADD_RAW}" ]]; then
        [[ -z "${password}" ]] || echo "${password}"
    elif creds_has_bin "gpaste-client"; then
        # Make sure we use the builtin echo not to leak the password via /proc
        [[ -z "${password}" ]] || builtin echo "${password}" | gpaste-client add-password "${name}"
        [[ -z "${username}" ]] || echo "${username}" | gpaste-client
        echo "Sucessfully added to GPaste" >&2
    else
        [[ -z "${username}" ]] || echo "Username: '${username}'" >&2
        if [[ ! -z "${password}" ]]; then
            echo -n "Password: '" >&2
            # Make sure we use the builtin echo not to leak the password via /proc
            builtin echo -n "${password}"
            echo "'" >&2
        fi
    fi
}

creds_get() {
    creds_simple_operation_checks "${@}"

    local name="${1}"
    local credentials
    local username
    local password

    credentials="$(creds_run_gpg -d "$(creds_file "${name}")")"
    username="$(echo "${credentials}" | sed -n '1p')"
    password="$(echo "${credentials}" | sed '1d')"

    creds_give_credentials "${name}" "$(echo "${credentials}" | sed -n '1p')" "$(echo "${credentials}" | sed '1d')"
}

creds_gpg_id() {
    case "${#}" in
        0)
            creds_get_gpg_id
            ;;
        1)
            echo "${1}" > "${CREDS_GPG_ID}"
            ;;
        *)
            creds_die_help 1
            ;;
    esac
}

creds_tree() {
    local path="${1:-""}"
    local full_path="${CREDS_DIR}/${path}"

    [[ "${#}" == "0" ]] || shift

    if [[ -d "${full_path}" ]]; then
        if [[ "${#}" != 0 ]]; then
            # We're running creds_find
            local pattern="${1}"
            shift
            echo "Find: ${pattern}"
        elif [[ -z "${path}" ]]; then
            echo "${CREDS_TOP_LABEL}"
        else
            echo "${CREDS_TOP_LABEL}/${path}"
        fi
        tree -l -C --noreport "${full_path}" "${@}" | sed -e '1d' -e 's/.creds//'
    else
        creds_die_help 1
    fi
}

creds_show() {
    local name="${1:-""}"

    if creds_check_file_not_empty "$(creds_file "${name}")"; then
        creds_get "${name}"
    else
        creds_tree "${name}"
    fi
}

creds_find() {
    creds_ensure_enough_args 1 "${@}"

    local pattern="${1}"

    creds_tree "" "${pattern}" -P "*${pattern}*" --ignore-case --matchdirs --prune
}

creds_grep() {
    creds_ensure_enough_args 1 "${@}"

    local pattern="${1}"
    local file

    while read -d '' -r file; do
        if grep -q "${pattern}" "${file}"; then
            echo "${file/"${CREDS_DIR}/"}" | sed -e 's/.creds//'
        fi
    done < <(find "${CREDS_DIR}" -name '*.creds' -print0)
}

main() {
    creds_ensure_dirs

    local cmd="${1:-""}"

    [[ "${#}" == "0" ]] || shift

    case "${cmd}" in
        version|--version|-v)
            creds_version
            ;;
        help|--help|-h)
            creds_help
            ;;
        add)
            creds_add "${@}"
            ;;
        add-raw)
            creds_add_raw "${@}"
            ;;
        generate)
            creds_generate "${@}"
            ;;
        edit)
            creds_edit "${@}"
            ;;
        rm)
            creds_rm "${@}"
            ;;
        cp)
            creds_cp "${@}"
            ;;
        mv)
            creds_mv "${@}"
            ;;
        get)
            creds_get "${@}"
            ;;
        git)
            creds_git "${@}"
            ;;
        gpg-id)
            creds_gpg_id "${@}"
            ;;
        tree)
            creds_tree "${@}"
            ;;
        show)
            creds_show "${@}"
            ;;
        find)
            creds_find "${@}"
            ;;
        grep)
            creds_grep "${@}"
            ;;
        *)
            creds_show "${cmd}"
            ;;
    esac
}

main "${@}"
