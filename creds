#!/usr/bin/env bash

set -euo pipefail

readonly CREDS_VERSION="0"

readonly CREDS_BIN="${0##*/}"
readonly CREDS_DIR="${XDG_DATA_HOME:-"${HOME}/.local/share"}/creds"
readonly CREDS_CONFIG_DIR="${XDG_CONFIG_HOME:-"${HOME}/.config"}/creds"
readonly CREDS_GPG_ID="${CREDS_CONFIG_DIR}/gpg-id"
readonly CREDS_TOP_LABEL="Credentials"

readonly CREDS_GPG_ARGS=( --batch -q --yes --no-encrypt-to --compress-algo=bzip2 )

creds_die() {
    local ret="${1}"

    shift

    echo "${*}" >&2
    exit "${ret}"
}

creds_version() {
    echo "${CREDS_BIN} version ${CREDS_VERSION}"
}

creds_help() {
    creds_version
    cat <<EOF
Usage:
    ${CREDS_BIN} [show] <name> -- Display a tree of credentials saved under <name>/ or get the credential named <name>
    ${CREDS_BIN} tree <name>   -- Display a tree of credentials saved under <name>/
    ${CREDS_BIN} add <name>    -- Add new credentials named <name>
    ${CREDS_BIN} edit <name>   -- Edit existing credentials named <name>
    ${CREDS_BIN} get <name>    -- Get the credentials named <name>
    ${CREDS_BIN} git ...       -- Run some git commands in the credentials data directory
    ${CREDS_BIN} gpg-id [id]   -- Display the configure gpg-id to use or set it
    ${CREDS_BIN} version       -- Display the version number
    ${CREDS_BIN} help          -- Display this message
EOF
}

creds_die_help() {
    local ret="${1}"

    creds_die "${ret}" "$(creds_help)"
}

creds_ensure_creds_dirs() {
    mkdir -p "${CREDS_DIR}"
    mkdir -p "${CREDS_CONFIG_DIR}"
}

creds_check_file_not_empty() {
    local file="${1}"

    [[ -f "${file}" && -s "${file}" ]]
}

creds_ensure_file_not_empty() {
    local file="${1}"

    creds_check_file_not_empty "${file}" || creds_die_help 1
}

creds_ensure_exists() {
    local name="${1}"
    local file="${CREDS_DIR}/${name}"

    creds_ensure_file_not_empty "${file}"
}

creds_ensure_gpg_id() {
    if ! creds_check_file_not_empty "${CREDS_GPG_ID}"; then
        creds_die 1 "No gpg-id configured, please set one using '${CREDS_BIN} gpg-id XXXXXXXX' where XXXXXXXX is your gpg id."
    fi
}

creds_ensure_enough_args() {
    local nb="${1}"

    shift

    if [[ "${#}" -lt "${nb}" ]]; then
        creds_die_help 1
    fi
}

creds_get_gpg_id() {
    creds_ensure_gpg_id
    cat -v "${CREDS_GPG_ID}"
}

creds_has_bin() {
    local bin="${1}"

    which "${1}" &>/dev/null
}

creds_get_gpg_bin() {
    local bins=(
        gpg2
        gpg
    )
    local bin

    for bin in "${bins[@]}"; do
        if creds_has_bin "${bin}"; then
            echo "${bin}"
            return
        fi
    done

    creds_die 1 "Neither of ${bins[*]} found on your system, aborting"
}

creds_run_gpg() {
    "$(creds_get_gpg_bin)" "${CREDS_GPG_ARGS[@]}" "${@}"
}

creds_has_git() {
    [[ -d "${CREDS_DIR}/.git" ]]
}

creds_git() {
    creds_ensure_enough_args 1 "${@}"

    local cmd="${1}"

    pushd "${CREDS_DIR}" &>/dev/null

    case "${cmd}" in
        init)
            git "${@}"
            git config --local diff.creds.textconv "$(creds_get_gpg_bin) ${CREDS_GPG_ARGS[*]} -d"
            cat > ".gitattributes" <<EOF
* diff=creds
.gitattributes -diff
EOF
            git add .
            git commit -m "Initial commit"
            ;;
        *)
            git "${@}"
            ;;
    esac

    popd &>/dev/null
}

creds_write_credentials() {
    local action="${1}"

    shift

    local name="${1}"
    local file="${CREDS_DIR}/${name}"
    local gpg_id
    local username
    local password

    gpg_id="$(creds_get_gpg_id)"

    read -r -p "Username: " username
    read -r -p "Password: " -s password
    echo

    mkdir -p "${file%/*}"
    creds_run_gpg -e -r "${gpg_id}" -o "${file}" <<EOF
${username}
${password}
EOF

    if creds_has_git; then
        creds_git add "${name}"
        creds_git commit -m "${action} ${name}"
    fi
}

creds_add() {
    creds_ensure_enough_args 1 "${@}"

    # TODO: ask before overriding
    creds_write_credentials "Add" "${@}"
}

creds_edit() {
    creds_ensure_enough_args 1 "${@}"

    local name="${1}"

    creds_ensure_exists "${name}"

    creds_write_credentials "Edit" "${@}"
}

creds_give_credentials() {
    local name="${1}"
    local username="${2}"
    local password="${3}"

    if creds_has_bin "gpaste-client"; then
        # Make sure we use the builtin echo not to leak the password via /proc
        [[ -z "${password}" ]] || builtin echo "${password}" | gpaste-client add-password "${name}"
        [[ -z "${username}" ]] || echo "${username}" | gpaste-client
    else
        [[ -z "${username}" ]] || echo "Username: '${username}'"
        [[ -z "${password}" ]] || builtin echo "Password: '${password}'"
    fi
}

creds_get() {
    creds_ensure_enough_args 1 "${@}"

    local name="${1}"
    local file="${CREDS_DIR}/${name}"
    local credentials
    local username
    local password

    creds_ensure_exists "${name}"

    credentials="$(creds_run_gpg -d "${file}")"
    username="$(echo "${credentials}" | sed -n '1p')"
    password="$(echo "${credentials}" | sed '1d')"

    creds_give_credentials "${name}" "$(echo "${credentials}" | sed -n '1p')" "$(echo "${credentials}" | sed '1d')"
}

creds_gpg_id() {
    case "${#}" in
        0)
            creds_get_gpg_id
            ;;
        1)
            echo "${1}" > "${CREDS_GPG_ID}"
            ;;
        *)
            creds_die_help 1
            ;;
    esac
}

creds_tree() {
    local path="${1:-""}"
    local full_path="${CREDS_DIR}/${path}"

    if [[ -d "${full_path}" ]]; then
        echo "${CREDS_TOP_LABEL}/${path}"
        tree -l -C --noreport "${full_path}" | sed '1d'
    else
        creds_die_help 1
    fi
}

creds_show() {
    local path="${1:-""}"
    local full_path="${CREDS_DIR}/${path}"

    if creds_check_file_not_empty "${full_path}"; then
        creds_get "${path}"
    else
        creds_tree "${path}"
    fi
}

creds_main() {
    local cmd="${1}"

    shift

    case "${cmd}" in
        version|--version|-v)
            creds_version
            ;;
        help|--help|-h)
            creds_help
            ;;
        add)
            creds_add "${@}"
            ;;
        edit)
            creds_edit "${@}"
            ;;
        get)
            creds_get "${@}"
            ;;
        git)
            creds_git "${@}"
            ;;
        gpg-id)
            creds_gpg_id "${@}"
            ;;
        tree)
            creds_tree "${@}"
            ;;
        show)
            creds_show "${@}"
            ;;
        *)
            creds_show "${cmd}"
            ;;
    esac
}

main() {
    creds_ensure_creds_dirs

    case "${#}" in
        0)
            creds_tree
            ;;
        *)
            creds_main "${@}"
            ;;
    esac
}

main "${@}"
